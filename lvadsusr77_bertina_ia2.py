# -*- coding: utf-8 -*-
"""LVADSUSR77-Bertina-IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BuJAafxmd0nV_BpR2CEqwSk2zT6z7Sak
"""

#Q1
import numpy as np

def rgb_to_grayscale(rgb_image):
    grayscale_image = np.dot(rgb_image[...,:3], [0.2989, 0.5870, 0.1140])
    return grayscale_image

rgb_image = np.array([[[255,0,0],[0,255,0],[0,0,255]],
                      [[255,255,0],[255,0,255],[0,255,255]],
                      [[127,127,127],[200,200,200],[50,50,50]]])
grayscale_image = rgb_to_grayscale(rgb_image)
print("Grayscale Image :\n", grayscale_image)

#Q2
def normalize(height, weight, age):
    height_norm = (height - np.mean(height)) / np.std(height)
    weight_norm = (weight - np.mean(weight)) / np.std(weight)
    age_norm = (age - np.mean(age)) / np.std(age)
    return height_norm, weight_norm, age_norm

height = np.array([170, 180, 160])
weight = np.array([70, 80, 65])
age = np.array([25, 30, 20])

height_norm, weight_norm, age_norm = normalize(height, weight, age)
print("Normalized Height:", height_norm)
print("Normalized Weight:", weight_norm)
print("Normalized Age:", age_norm)

#Q3
def reorganize_data(sensor_data):
    flattened_data = sensor_data.reshape(sensor_data.shape[0], -1)
    return flattened_data
sensor_data = np.random.rand(3, 2, 4)
reorganized_data = reorganize_data(sensor_data)
print("Reorganized Data:\n", reorganized_data)

#Q4
def calculate_improvement(scores):
    return scores[:, -1] - scores[:, 0]
athlete_scores = np.random.randint(0, 100, size=(5, 10))
print(athlete_scores)
improvement = calculate_improvement(athlete_scores)
print("Improvement for each athlete:", improvement)

#Q5
import pandas as pd
import numpy as np
import random

def calculate_average(scores):
    last_3_subjects = scores[:, -3:]
    last_3_subjects = last_3_subjects[last_3_subjects != -1]
    return round(np.mean(last_3_subjects),2)
student_scores = np.array([[90, 85, 80, -1, 95],
                            [75, 80, -1, 85, 90],
                            [85, 90, 88, 92, -1]])
average = calculate_average(student_scores)
print("Average score in last 3 subjects for each student:", average)

#Q6
def apply_adjustment_factors(city_temperatures, adjustment_factors):
    adjusted_temperatures = city_temperatures + adjustment_factors[:, np.newaxis]
    return adjusted_temperatures
city_temperatures = np.random.randint(0, 50, size=(5, 12))
adjustment_factors = np.random.uniform(-2, 2, size=12)
adjusted_temperatures = apply_adjustment_factors(city_temperatures, adjustment_factors)
print("Adjusted Temperatures:\n", adjusted_temperatures)

#Q7
data = {
    'Name': ['Alice','Bob','Charlie','David','Eve','Frank','Grace'],
    'Age' : [25,30,35,40,45,50,55],
    'City' : ['New York','Los Angeles','Chicago','Houston','Phoenix','Miami','Boston'],
    'Department' : ['HR','IT','Finance','Marketing','Sales','IT','HR']
}
def employees_not_in_HR(data):
    mask = (data['Age'] < 45) & (data['Department'] != 'HR')
    return data.loc[mask, ['Name', 'City']]
employees_list = employees_not_in_HR(pd.DataFrame(data))
print("Employees under 45 not in HR department:\n", employees_list)

#Q8
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

def identify_promotion_candidates(data):
    fruit_data = pd.DataFrame(data)
    fruit_data = fruit_data[fruit_data['Category'] == 'Fruit']
    avg_price = fruit_data['Price'].mean()
    candidates = fruit_data[(fruit_data['Price'] > avg_price) & (~fruit_data['Promotion'])]
    return candidates

promotion_candidates = identify_promotion_candidates(data)
print("Potential candidates for promotion:\n", promotion_candidates)

#Q9
employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}

project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}
employee_df = pd.DataFrame(employee_data)
project_df = pd.DataFrame(project_data)
merged_df = pd.merge(project_df, employee_df, on='Employee', how='left')
print(merged_df)

#Q10
data = {
    'Department' : ['Electronics', 'Electronics','Clothing','Clothing','Home Goods'],
    'Salesperson' : ['Alice','Bob','Charlie','David','Eve'],
    'Sales': [70000,50000,30000,40000,60000]
}
df = pd.DataFrame(data)
avg_sales_per_salesperson = df.groupby('Department')['Sales'].mean()
ranked_departments = avg_sales_per_salesperson.sort_values(ascending=False)

print("Average Sales per Salesperson in Each Department:")
print(avg_sales_per_salesperson)
print("Ranked Departments based on Average Sales:")
print(ranked_departments)